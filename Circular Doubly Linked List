#include<bits/stdc++.h>
using namespace std;
struct node{
    node* prev;
    int item;
    node* next;
};

class cdll{
    private:
        node* start;
    public:
    cdll();                         //-------line no-> 129
    void InsertAtBegin(int);        //-------line no-> 134
    void InsertAtLast(int);         //-------line no-> 97
    void ShowList();                //-------line no-> 115
    node* Search(int);              //-------line no-> 79
    void DeleteAtBegin();           //-------line no-> 154
    void DeleteAtLast();            //-------line no-> 172
    void DeleteSpecfied(node*);     //-------line no-> 61
    void InsertAfter(node* ,int);   //-------line no-> 33
    ~cdll();                        //-------line no-> 25
};

cdll::~cdll()
{
    while(start!=NULL)
    {
        DeleteAtBegin();
    }
}

void cdll::InsertAfter(node* t,int data)
{
    
    node* n=new node;
    n->item=data;
    if(t==start)
    {
        n->prev=start;
        n->next=start->next;
        start->next->prev=n;
        t->next=n;
    }
    else if(t==start->prev)
    {
        n->prev=start->prev;
        n->next=start;
        start->prev->next=n;
        start->prev=n;
    }
    else{
    n->prev=t;
    n->next=t->next;
    t->next->prev=n;
    t->next=n;
    }

}

void cdll::DeleteSpecfied(node* t)
{

    if(t==start)
    {
        DeleteAtBegin();
    }
    else if(t->next==start)
    {
        DeleteAtLast();
    }
    else{
    t->next->prev=t->prev;
    t->prev->next=t->next;
    delete t;
    }
}

node* cdll::Search(int data)
{
    
        node* t=start;
        if(start==NULL)
            return NULL;
        while(t->next!=start)
        {
        if(t->item==data)
            return t;
        t=t->next;
        }
        if(t->item==data)
            return t;
        return NULL;
    
}

void cdll::InsertAtLast(int data)
{
    node* n=new node;
    n->item=data;
    if(start==NULL)
        {
            n->next=start;
            n->prev=start;
            start=n;
        }
    else{
    n->next=start;
    n->prev=start->prev;
    start->prev->next=n;
    start->prev=n;
    }
}

void cdll::ShowList()
{
    if(start==NULL)
        cout<<"list is empty."<<endl;
    else{
    node* t=start;
    while(t->next!=start){
    cout<<t->item<<endl;
    t=t->next;
    }
    cout<<t->item<<endl;
    }
}

cdll::cdll()
{
    start=NULL;
}

void cdll::InsertAtBegin(int data)
{
    node* n=new node;
    n->item=data;
    if(start==NULL)
    {
        n->prev=n;
        n->next=n;

    }
    else
    {
    n->prev=start->prev;
    n->next=start;
    start->prev->next=n;
    start->prev=n;
    }
    start=n;
}

void cdll::DeleteAtBegin()
{
    if(start==NULL)
        cout<<"Underflow."<<endl;
    else if(start->prev==start)
    {
        delete start;
        start=NULL;
    }
    else{
        start->prev->next=start->next;
        start->next->prev=start->prev;
        node* t=start->next;
        delete start;
        start=t;
    }
}

void cdll::DeleteAtLast()
{
    if(start==NULL)
        cout<<"Underflow"<<endl;
    else if(start->prev==start)
    {
        delete start;
        start=NULL;
    }
    else{
        node* t=start->prev;
        start->prev->prev->next=start;
        start->prev=start->prev->prev;
        
        delete t;
    }
}

int main()
{
    //cdll ob;
    //ob.InsertAtBegin(3);
    //ob.InsertAtBegin(5);
    //ob.InsertAtBegin(6);
    //ob.InsertAtBegin(7);
    //ob.InsertAtBegin(8);
    //ob.ShowList();
    //ob.InsertAfter(ob.Search(6),2);
    //cout<<endl;
    //ob.ShowList();
    //return 0;
}
