/*  Dynamic array data structure */
#include<iostream>
using namespace std;
class dynarray{
    private:
        int capacity;
        int lastindex;
        int *ptr;
    public:
    dynarray(int size);
    void doublearray();
    void halfarray();
    void currentcapacity(); 
    bool empty();
    void append(int element);
    void insert(int element,int index);
    void edit(int element,int index);
    void remove(int index);
    bool full();
    void get(int index);
    void countelement();
    ~dynarray();
    int find(int element);
};

dynarray:: dynarray(int size)
{
    ptr=new int [size];
    capacity=size;
    lastindex=-1;
}

void dynarray::append(int element)
{
    if(lastindex<capacity-1)
    {
        *(ptr+lastindex+1)=element;
    }
    else
    {
        
        *(ptr+lastindex+1)=element;
    }
    lastindex=lastindex+1;
    
    
}

void dynarray:: currentcapacity()
{
    cout<<"current capacity of array is:"<<endl;
    cout<<capacity;
}

bool dynarray:: empty()
{
    return lastindex==-1;
}

void dynarray:: edit(int element,int index)
{
    if(index>lastindex && index<0)
    {
        cout<<"Invalid index."<<endl;
    }
    else
    {
        *(ptr+index)=element;
    }
}

void dynarray:: insert(int element,int index)
{
    int i=lastindex;
    if(index>lastindex+1 && index<0)
    {
        cout<<"Invalid index."<<endl;
    }
    else
    {
        if(full())
        {
            doublearray();
        }
        if(index<=lastindex)
        {
            for(i=lastindex;i>=index;i--)
            {
                *(ptr+i+1)=*(ptr+i);
            }
            *(ptr+index)=element;
        }
        else
        {
            *(ptr+index)=element;
        }
        lastindex=lastindex+1;

    }
}

bool dynarray:: full()
{
    return lastindex==(capacity-1);
}

void dynarray:: doublearray()
{
    int *str,i=0;
    capacity=capacity*2;
    str=new int [capacity];
    for(i=0;i<=lastindex;i++)
    {
        *(str+i)=*(ptr+i);
    }
    delete [] ptr;
    ptr=str;
}

void dynarray:: halfarray()
{
    int *str,i=0;
    capacity=capacity/2;
    str=new int [capacity];
    for(i=0;i<=lastindex;i++)
    {
        *(str+i)=*(ptr+i);
    }
    delete [] ptr;
    ptr=str;
}

dynarray:: ~dynarray()
{
    delete [] ptr;
}

void dynarray:: countelement()
{
    cout<<"no of element present in array is:"<<endl;
    cout<<lastindex+1;
}

int dynarray:: find(int element)
{
    int i=0;
    for(i=0;i<=lastindex;i++)
    {
        if(element==*(ptr+i))
        {
            return i;
        }
    }
    return -1;
}

void dynarray:: get(int index)
{
    if(index<0 && index>lastindex)
    {
        cout<<"Invalid index."<<endl;
    }
    else
    {
        cout<<*(ptr+index)<<endl;
    }
}

int main(void)
{
    int size;
    cout<<"Enter size of array:"<<endl;
    cin>>size;
    dynarray obj1(size);
    obj1.append(55);
    obj1.append(44);
    obj1.append(75);
    obj1.insert(45,1);
    obj1.insert(45,2);
    obj1.insert(45,1);
    
    obj1.get(0);
    obj1.get(1);
    obj1.get(2);
    obj1.get(3);
    obj1.get(4);
    obj1.get(5);
    obj1.currentcapacity();
    obj1.countelement();
    int s;
    s=obj1.find(428);
    if(s>=0)
    {
        cout<<s;
    }
    else
        cout<<"not";
    return 0;
}
